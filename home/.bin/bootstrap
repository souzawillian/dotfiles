#!/usr/bin/env bash

# bootstrap setup for arch linux contains install/configure instructions

export EDITOR=vim
PKGLIST=${HOME}/.bin/pkgs
PKGLOG=${HOME}/.pacaur.log
SHRC=${HOME}/.zshrc

# configure keyboard layout
sudo setxkbmap -model abnt2 -layout br -variant abnt2

# pacman update
sudo pacman -Syu --needed

# pacman install  dependencies
sudo pacman -S --noconfirm --needed pacaur git


# sync sensitive - not versioned - dotfiles
ln -sf "${HOME}/Dropbox" "${HOME}/Cloud"
ln -sf "${HOME}/Cloud/sync/history" "${HOME}/.history"
ln -sf "${HOME}/Cloud/sync/env" "${HOME}/.env"
ln -sf "${HOME}/Cloud/sync/chaordic-utils" "${HOME}/.chaordic-utils"
# ln -sf ${HOME}/Cloud/sync/ssh_config ${HOME}/.ssh/config
# ln -sf ${HOME}/Cloud/sync/copyq.conf ${HOME}/.config/copyq/copyq.conf


echo "[ bootstrap ] :: Include new repo pritunl vpn client to pacman"
if grep -qxF '[multilib]' /etc/pacman.conf; then
    sudo tee -a /etc/pacman.conf << EOF
[pritunl]
Server = https://repo.pritunl.com/stable/pacman
EOF

    sudo pacman-key --keyserver hkp://keyserver.ubuntu.com -r 7568D9BB55FF9E5287D586017AE645C0CF8E292A
    sudo pacman-key --lsign-key 7568D9BB55FF9E5287D586017AE645C0CF8E292A
fi

echo "[ bootstrap ] :: Installing pacman/aur packages"
for PKG in $(cat $PKGLIST); do
    pacaur -S --needed --noedit --noconfirm ${PKG} || echo "$PKG failed." >> $PKGLOG
done

if [ -x "$(command -v subl3)" ]; then
    old_subl="$(command -v subl3)"
    sudo mv "${old_subl}" "$(echo ${old_subl} | sed 's/subl3/subl/')"
fi

# install oh-my-zsh
if [ ! -d ${HOME}/.oh-my-zsh ]; then
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
fi

# install and configure homeshick
if [ ! -d ${HOME}/.homesick ]; then
    echo "[ bootstrap ] :: Install homeshick"

    git clone https://github.com/andsens/homeshick.git "${HOME}/.homesick/repos/homeshick"

    if [[ -f $SHRC ]]; then
        printf '\n# ZSH, load and run bashcompinit before calling the complete function.' >> $SHRC
        printf '\nif [[ -n ${ZSH_VERSION-} ]]; then' >> $SHRC
        printf '\n\tautoload -U +X bashcompinit && bashcompinit' >> $SHRC
        printf '\n\tautoload -U +X compinit && compinit' >> $SHRC
        printf '\nfi' >> $SHRC

        printf '\nsource "${HOME}/.homesick/repos/homeshick/homeshick.sh"' >> $SHRC
        printf '\nsource "${HOME}/.homesick/repos/homeshick/completions/homeshick-completion.bash"' >> $SHRC
    fi
fi

# install pyenv
if [ ! -d ${HOME}/.pyenv ]; then
    echo "[ bootstrap ] :: Install pyenv"
    curl https://pyenv.run | bash

    echo -e "\n# configure pyenv" >> $SHRC
    echo -e '\nexport PATH="${HOME}/.pyenv/bin:$PATH"' >> $SHRC

    echo -e '\neval "$(pyenv init -)"' >> $SHRC
    echo -e '\neval "$(pyenv virtualenv-init -)"' >> $SHRC
fi

# install nvm
if [ ! -d ${HOME}/.nvm ]; then
    echo "[ bootstrap ] :: Install nvm"
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash

    echo -e "\n# configure nvm" >> $SHRC
    echo -e '\nexport NVM_DIR="${HOME}/.nvm"' >> $SHRC
    echo -e '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm' >> $SHRC
fi

# configure aws-cli autocompleter
if [[ -x "/usr/bin/aws_zsh_completer.sh" ]]; then
    echo -e '\nsource /usr/bin/aws_zsh_completer.sh' >> $SHRC
fi

echo -e '\nsource ${HOME}/.customrc' >> $SHRC

# update zsh with my customizations
sed -i -r 's/^(ZSH_THEME=).*$/\1"robinho"/' $SHRC
sed -i -r 's/^(plugins=).*$/\1(git npm python-prompt tmux wd zsh-autosuggestions)/' $SHRC

###### Configs
sudo timedatectl set-ntp true  # enable ntp on timedate
if [[ -x "$(command -v docker)" ]]; then
    systemctl start docker      # start docker service
    systemctl enable docker     # configure Docker to start on boot

    sudo groupadd docker          # create the docker group
    sudo usermod -aG docker $USER # add my user to the docker group
fi

# Enable the SSH service
systemctl enable --now sshd.service

# install fzf
# if [ ! -d ${HOME}/.fzf ]; then
#   echo "[ bootstrap ] :: Install fzf"
#   git clone --depth 1 https://github.com/junegunn/fzf.git ${HOME}/.fzf
#   ${HOME}/.fzf/install
# else
#   echo "[ bootstrap ] :: fzf already installed!"
# fi
